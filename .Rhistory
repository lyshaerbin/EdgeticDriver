setwd("C:/projects/GBM progre/GBM-figure0922")
UU=read.csv("C:/projects/GBM progre/GBM-figure0922/motif/lnc_UU.motif/lnc_UU.txt",
stringsAsFactors=F,sep="\t",skip=0,header = T)
View(UU)
log2(1.0e-4)
log(1.0e-4)
log(1.0e-2)
UM=read.csv("C:/projects/GBM progre/GBM-figure0922/motif/lnc_UM.motif/lnc_UM.txt",
stringsAsFactors=F,sep="\t",skip=0,header = T)
View(UM)
MU=read.csv("C:/projects/GBM progre/GBM-figure0922/motif/lnc_MU.motif/lnc_MU.txt",
stringsAsFactors=F,sep="\t",skip=0,header = T)
MD=read.csv("C:/projects/GBM progre/GBM-figure0922/motif/lnc_MD.motif/lnc_MD.txt",
stringsAsFactors=F,sep="\t",skip=0,header = T)
View(MU)
View(MD)
DM=read.csv("C:/projects/GBM progre/GBM-figure0922/motif/lnc_DM.motif/lnc_DM.txt",
stringsAsFactors=F,sep="\t",skip=0,header = T)
DD=read.csv("C:/projects/GBM progre/GBM-figure0922/motif/lnc_DD.motif/lnc_DD.txt",
stringsAsFactors=F,sep="\t",skip=0,header = T)
View(DM)
View(DD)
motif.name=UU$Motif.Name
LogP.score=c()
for(i in 1:length(motif.name)){
x1=which(UU$Motif.Name==motif.name[i])
x2=which(UM$Motif.Name==motif.name[i])
x3=which(MU$Motif.Name==motif.name[i])
x4=which(MD$Motif.Name==motif.name[i])
x5=which(DM$Motif.Name==motif.name[i])
x6=which(DD$Motif.Name==motif.name[i])
k=cbind(UU$Log.P.value[x1],UM$Log.P.value[x2],
MU$Log.P.value[x3],MD$Log.P.value[x4],
DM$Log.P.value[x5],DD$Log.P.value[x6])
LogP.score=rbind(LogP.score,k)
}
rownames(LogP.score)=motif.name
View(LogP.score)
hc = hclust(dist((LogP.score)),method = "average")
library(ape)
mypal = c("#46C7F0", "#4FB95A", "#E188B9", "#EFAD1E", "#53C1AE","#8CB4E0")
# cutting dendrogram in 6 clusters
clus5 = cutree(hc, 6)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0,
col = "red")
library(pheatmap)
pheatmap(LogP.score,cluster_cols = F,show_rownames = T,labels_row = motif.name)
Three.sam=function(fusion_sample){
fusionthree=c()
for (i in 1:length(fusion_sample)) {
aa=strsplit(fusion_sample[i],"(")
bb=aa[[1]][1]
fusionthree=rbind(fusionthree,bb)
}
return(fusionthree)
}
motif.name=Three.sam(motif.name)
Three.sam=function(fusion_sample){
fusionthree=c()
for (i in 1:length(fusion_sample)) {
aa=strsplit(fusion_sample[i],"\\(")
bb=aa[[1]][1]
fusionthree=rbind(fusionthree,bb)
}
return(fusionthree)
}
motif.name=Three.sam(motif.name)
View(motif.name)
LogP.score=c()
for(i in 1:length(motif.name)){
x1=which(UU$Motif.Name==motif.name[i])
x2=which(UM$Motif.Name==motif.name[i])
x3=which(MU$Motif.Name==motif.name[i])
x4=which(MD$Motif.Name==motif.name[i])
x5=which(DM$Motif.Name==motif.name[i])
x6=which(DD$Motif.Name==motif.name[i])
k=cbind(UU$Log.P.value[x1],UM$Log.P.value[x2],
MU$Log.P.value[x3],MD$Log.P.value[x4],
DM$Log.P.value[x5],DD$Log.P.value[x6])
LogP.score=rbind(LogP.score,k)
}
rownames(LogP.score)=motif.name
hc = hclust(dist((LogP.score)),method = "average")
library(ape)
mypal = c("#46C7F0", "#4FB95A", "#E188B9", "#EFAD1E", "#53C1AE","#8CB4E0")
# cutting dendrogram in 6 clusters
clus5 = cutree(hc, 6)
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0,
col = "red")
LogP.score=c()
for(i in 1:length(motif.name)){
x1=which(UU$Motif.Name==motif.name[i])
x2=which(UM$Motif.Name==motif.name[i])
x3=which(MU$Motif.Name==motif.name[i])
x4=which(MD$Motif.Name==motif.name[i])
x5=which(DM$Motif.Name==motif.name[i])
x6=which(DD$Motif.Name==motif.name[i])
k=cbind(UU$Log.P.value[x1],UM$Log.P.value[x2],
MU$Log.P.value[x3],MD$Log.P.value[x4],
DM$Log.P.value[x5],DD$Log.P.value[x6])
LogP.score=rbind(LogP.score,k)
}
View(motif.name)
length(motif.name)
motif.name=UU$Motif.Name
Three.sam=function(fusion_sample){
fusionthree=c()
for (i in 1:length(fusion_sample)) {
aa=strsplit(fusion_sample[i],"\\(")
bb=aa[[1]][1]
fusionthree=rbind(fusionthree,bb)
}
return(fusionthree)
}
motif.name1=Three.sam(motif.name)
LogP.score=c()
for(i in 1:length(motif.name)){
x1=which(UU$Motif.Name==motif.name[i])
x2=which(UM$Motif.Name==motif.name[i])
x3=which(MU$Motif.Name==motif.name[i])
x4=which(MD$Motif.Name==motif.name[i])
x5=which(DM$Motif.Name==motif.name[i])
x6=which(DD$Motif.Name==motif.name[i])
k=cbind(UU$Log.P.value[x1],UM$Log.P.value[x2],
MU$Log.P.value[x3],MD$Log.P.value[x4],
DM$Log.P.value[x5],DD$Log.P.value[x6])
LogP.score=rbind(LogP.score,k)
}
hc = hclust(dist((LogP.score)),method = "average")
library(ape)
mypal = c("#46C7F0", "#4FB95A", "#E188B9", "#EFAD1E", "#53C1AE","#8CB4E0")
# cutting dendrogram in 6 clusters
clus5 = cutree(hc, 6)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0,
col = "red")
motif.name1=Three.sam(motif.name)
D1=LogP.score
R=c()
for(i in 1:dim(D1)[1]){
CC=c()
print(i)
for(j in 1:dim(D1)[1]){
#df2=data.frame(x1=D1[i,],x2=D1[j,])
D=cor(as.numeric(D1[i,]),as.numeric(D1[j,]))
CC=cbind(CC,D)
}
R=rbind(R,CC)
}
View(R)
rownames(R)=motif.name1
hc = hclust(dist((R)),method = "average")
library(ape)
mypal = c("#46C7F0", "#4FB95A", "#E188B9", "#EFAD1E", "#53C1AE","#8CB4E0")
# cutting dendrogram in 6 clusters
clus5 = cutree(hc, 6)
# plot
op = par(bg = "#E8DDCB")
# Size reflects miles per gallon
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 0,
col = "red")
View(R)
library(pheatmap)
pheatmap(D1,cluster_cols = F,show_rownames = T,labels_row = motif.name)
pheatmap(D1,cluster_cols = F,show_rownames = T,labels_row = motif.name1)
541/433
541-433
108*4
library(EdgeticDriver)
setwd("C:/projects/immune landscape/immune_net")
immune.gene=read.csv("C:/projects/immune landscape/immune_net/Gene-from_ImmPort.txt",stringsAsFactors=F,sep="\t",skip=0,header = T)
CR.net=c()
Network=read.csv("C:/projects/immune landscape/immune_net/SCIN.txt",stringsAsFactors=F,sep="\t",skip=0,header = F)
CR.node=immune.gene$Symbol
for(i in 1:dim(Network)[1]){
print(i)
x1=which(CR.node==Network$V1[i])
x2=which(CR.node==Network$V2[i])
if(length(x1)>0&length(x2)>0){
CR.net=rbind(CR.net,Network[i,])
}
}
setwd("C:/projects/immune landscape/immune_net")
library(EdgeticDriver)
library(SummarizedExperiment)
Network=CR.net
cancer<-c("KIRC","KIRP","KICH","LGG","GBM","BRCA","LUSC","LUAD","READ","COAD","UCS","UCEC","OV","HNSC","THCA","PRAD","STAD","SKCM","BLCA",
"LIHC","CESC","ACC","PCPG","SARC","LAML","PAAD","ESCA","TGCT","THYM","MESO","UVM","DLBC","CHOL")
for(kc in 6:8){
print(paste("Now this is the ", kc, " cancer", sep=""))
load(paste("C:/projects/AS/geneexpression/",cancer[kc],"Expression.rda",sep = ""))
LIHCmatrix<-assay(data,1,"FPKM")
allLIHCsample=colnames(LIHCmatrix)
C_N=data@colData@listData$definition#############sample information tumor vs normal
Cancer_s=which(C_N!="Solid Tissue Normal")
Normal_s=which(C_N=="Solid Tissue Normal")
gene=rownames(LIHCmatrix)
######remove genes with 0 in at least 30% samples
N=dim(LIHCmatrix)[2]
Re.gene=c()
for(i in 1:dim(LIHCmatrix)[1]){
#print(i)
xx=which(LIHCmatrix[i,2:N]==0)
n=length(xx)
if(n>=N*0.3){
Re.gene=rbind(Re.gene,i)
}
}
LIHCmatrix=LIHCmatrix[-Re.gene,]
gene=gene[-Re.gene]
################transformed to gene symbols
genecode=read.csv("gencode_gene_pro.txt",stringsAsFactors=F,sep="\t",skip=0,header = F)
Gene.input=c()
Exp.input=c()
for(i in 1:length(gene)){
#print(i)
x=which(genecode$V1==gene[i])
if(length(x)==1){
Gene.input=rbind(Gene.input,genecode[i,])
Exp.input=rbind(Exp.input,LIHCmatrix[i,])
}
}
Gene.input=Gene.input$V2
rownames(Exp.input)=Gene.input
Mut=read.csv(paste("C:/projects/DNA_repair/Mutation/MC3/",cancer[kc],"_mut.txt",sep = ""),
stringsAsFactors=F,sep="\t",skip=0,header = T)
Mut=Mut[,c(1,5:7,9,12,13,16)]
Input.exp=Exp.input
if(length(Normal_s)>0){
DysCN=EdgeticDys_CN(Input.exp,Network,thr=0.01)
Input.exp2=Input.exp[,Cancer_s]
DysC=EdgeticDys_CN(Input.exp2,Network,thr=0.01)
Dys.net=EdgeticDys_both(DysCN,DysC)
Driver.mut=getEdgeticDriver(Dys.net,Mut,alpha=1.05,n.sim=1000)
write.table(Dys.net,paste(cancer[kc],"_Dys.txt",sep=""),sep = "\t",row.names = FALSE, col.names = T,quote = FALSE)
write.table(Driver.mut,paste(cancer[kc],"_driver.txt",sep=""),sep = "\t",row.names = FALSE, col.names = T,quote = FALSE)
} else {
DysCN=EdgeticDys_CN(Input.exp,Network,thr=0.01)
Driver.mut=getEdgeticDriver(DysCN,Mut,alpha=1.05,n.sim=1000)
write.table(DysCN,paste(cancer[kc],"_Dys.txt",sep=""),sep = "\t",row.names = FALSE, col.names = T,quote = FALSE)
write.table(Driver.mut,paste(cancer[kc],"_driver.txt",sep=""),sep = "\t",row.names = FALSE, col.names = T,quote = FALSE)
}
}
library(EdgeticDriver)
Input.exp=GetExampleData(exampleData="Exp.input")
head(Input.exp)
Cancer_s=GetExampleData(exampleData="Cancer_s")
Normal_s=GetExampleData(exampleData="Normal_s")
Network=GetExampleData(exampleData="network")
Mut=GetExampleData(exampleData="mut")
DysCN=EdgeticDys_CN(Input.exp,Network,thr=0.01)
Input.exp2=Input.exp[,Cancer_s]
DysC=EdgeticDys_CN(Input.exp2,Network,thr=0.01)
Dys.net=EdgeticDys_both(DysCN,DysC)
U.edge=unique(Dysnet[,2:3])
Dysnet=Dys.net
View(Dysnet)
U.edge=unique(Dysnet[,2:3])
Mutdys=c()
for(i in 1:dim(U.edge)[1]){
if(i%%100==0) {print(i)}
xa=which(Mut$Hugo_Symbol==U.edge$GeneA[i])
xb=which(Mut$Hugo_Symbol==U.edge$GeneB[i])
if(length(xa)>0|length(xb)>0){
Mutdys=rbind(Mutdys,U.edge[i,])
}
}
View(Mutdys)
Three.sam=function(fusion_sample){
fusionthree=c()
for (i in 1:length(fusion_sample)) {
aa=strsplit(as.character(fusion_sample[i]),"-")
bb=paste(aa[[1]][1],aa[[1]][2],aa[[1]][3],sep="-")
fusionthree=rbind(fusionthree,bb)
}
return(fusionthree)
}
N11=length(unique(Dysnet$Sam.ID))#######the number of samples with dysregulated edges
N22=length(unique(Mut$Tumor_Sample_Barcode))
ii=1
xx=which(Dysnet$GeneA==Mutdys$GeneA[ii]&Dysnet$GeneB==Mutdys$GeneB[ii])
Dys.sam=unique(Dysnet$Sam.ID[xx])
A=Three.sam(Dys.sam)
Xmut1=which(Mut$Hugo_Symbol==Mutdys$GeneA[ii])
Xmut2=which(Mut$Hugo_Symbol==Mutdys$GeneB[ii])
Xmut=union(Xmut1,Xmut2)
Gene.mut=Mut[Xmut,]
View(Gene.mut)
Gene.mut=unique(Gene.mut[,1:7])
library(EdgeticDriver)
FF.net=c()
for(ii in 1:dim(Mutdys)[1]){
if(ii%%100==0) {print(ii)}
xx=which(Dysnet$GeneA==Mutdys$GeneA[ii]&Dysnet$GeneB==Mutdys$GeneB[ii])
Dys.sam=unique(Dysnet$Sam.ID[xx])
A=Three.sam(Dys.sam)
Xmut1=which(Mut$Hugo_Symbol==Mutdys$GeneA[ii])
Xmut2=which(Mut$Hugo_Symbol==Mutdys$GeneB[ii])
Xmut=union(Xmut1,Xmut2)
Gene.mut=Mut[Xmut,]
Gene.mut=unique(Gene.mut[,1:7])
for(j in 1:dim(Gene.mut)[1]){
y1=which(Mut$Hugo_Symbol==Gene.mut$Hugo_Symbol[j]&
Mut$Chromosome==Gene.mut$Chromosome[j]&
Mut$Start_Position==Gene.mut$Start_Position[j]&
Mut$End_Position==Gene.mut$End_Position[j]&
Mut$Variant_Classification==Gene.mut$Variant_Classification[j]&
Mut$Tumor_Seq_Allele1==Gene.mut$Tumor_Seq_Allele1[j]&
Mut$Tumor_Seq_Allele2==Gene.mut$Tumor_Seq_Allele2[j])
Mut.sam=unique(Mut$Tumor_Sample_Barcode[y1])
B=Three.sam(Mut.sam)
#Simulation p-value
sim=unlist(lapply(1:n.sim,
function(i){AA=sample(1:N11,length(A));BB=sample(1:N22,length(B));return(sum(AA %in% BB))}))
P=length(which(sim>=length(intersect(A,B))))/n.sim
WKK=cbind(Gene.mut[j,],Mutdys[ii,],length(B),length(A),length(intersect(A,B)),P)
FF.net=rbind(FF.net,WKK,stringsAsFactors = FALSE)
}
}
n.sim=1000
FF.net=c()
for(ii in 1:dim(Mutdys)[1]){
if(ii%%100==0) {print(ii)}
xx=which(Dysnet$GeneA==Mutdys$GeneA[ii]&Dysnet$GeneB==Mutdys$GeneB[ii])
Dys.sam=unique(Dysnet$Sam.ID[xx])
A=Three.sam(Dys.sam)
Xmut1=which(Mut$Hugo_Symbol==Mutdys$GeneA[ii])
Xmut2=which(Mut$Hugo_Symbol==Mutdys$GeneB[ii])
Xmut=union(Xmut1,Xmut2)
Gene.mut=Mut[Xmut,]
Gene.mut=unique(Gene.mut[,1:7])
for(j in 1:dim(Gene.mut)[1]){
y1=which(Mut$Hugo_Symbol==Gene.mut$Hugo_Symbol[j]&
Mut$Chromosome==Gene.mut$Chromosome[j]&
Mut$Start_Position==Gene.mut$Start_Position[j]&
Mut$End_Position==Gene.mut$End_Position[j]&
Mut$Variant_Classification==Gene.mut$Variant_Classification[j]&
Mut$Tumor_Seq_Allele1==Gene.mut$Tumor_Seq_Allele1[j]&
Mut$Tumor_Seq_Allele2==Gene.mut$Tumor_Seq_Allele2[j])
Mut.sam=unique(Mut$Tumor_Sample_Barcode[y1])
B=Three.sam(Mut.sam)
#Simulation p-value
sim=unlist(lapply(1:n.sim,
function(i){AA=sample(1:N11,length(A));BB=sample(1:N22,length(B));return(sum(AA %in% BB))}))
P=length(which(sim>=length(intersect(A,B))))/n.sim
WKK=cbind(Gene.mut[j,],Mutdys[ii,],length(B),length(A),length(intersect(A,B)),P)
FF.net=rbind(FF.net,WKK,stringsAsFactors = FALSE)
}
}
View(FF.net)
